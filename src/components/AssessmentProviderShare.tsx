import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { useToast } from "@/hooks/use-toast";
import {
  Share2,
  Mail,
  Download,
  Copy,
  CheckCircle,
  AlertCircle,
  FileText,
  Send,
} from "lucide-react";
import type { AssessmentResultWithInsights } from "@/lib/assessmentService";
import { generateAssessmentPDF } from "@/lib/pdfExport";

interface AssessmentProviderShareProps {
  results: AssessmentResultWithInsights[];
  assessmentType: string;
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

export default function AssessmentProviderShare({
  results,
  assessmentType,
  open,
  onOpenChange,
}: AssessmentProviderShareProps) {
  const { toast } = useToast();
  const [shareMethod, setShareMethod] = useState<"email" | "download" | "copy" | null>(null);
  const [providerEmail, setProviderEmail] = useState("");
  const [providerName, setProviderName] = useState("");
  const [additionalNotes, setAdditionalNotes] = useState("");
  const [isSending, setIsSending] = useState(false);

  const latestResult = results[0];

  const generateShareableText = () => {
    if (!latestResult) return "";

    const text = `
MENTAL HEALTH ASSESSMENT REPORT
================================

Assessment Type: ${assessmentType.toUpperCase()}
Date: ${new Date(latestResult.completed_at).toLocaleDateString()}
Time: ${new Date(latestResult.completed_at).toLocaleTimeString()}

CURRENT RESULTS
---------------
Score: ${latestResult.score}
Severity Level: ${latestResult.severity.replace("_", " ").toUpperCase()}
Interpretation: ${latestResult.interpretation || "N/A"}

${
  latestResult.recommendations && latestResult.recommendations.length > 0
    ? `
RECOMMENDATIONS
---------------
${latestResult.recommendations.map((rec, i) => `${i + 1}. ${rec}`).join("\n")}
`
    : ""
}

${
  results.length > 1
    ? `
ASSESSMENT HISTORY (Last ${Math.min(5, results.length)} assessments)
--------------------
${results
  .slice(0, 5)
  .map(
    (r, i) =>
      `${i + 1}. ${new Date(r.completed_at).toLocaleDateString()}: Score ${r.score} (${r.severity.replace("_", " ")})`
  )
  .join("\n")}
`
    : ""
}

${
  additionalNotes
    ? `
PATIENT NOTES
-------------
${additionalNotes}
`
    : ""
}

IMPORTANT DISCLAIMER
--------------------
This assessment is a screening tool and not a diagnostic instrument.
Results should be interpreted by a qualified healthcare professional.

Generated by Peace - Mental Health & Wellness App
    `.trim();

    return text;
  };

  const handleCopyToClipboard = async () => {
    try {
      const text = generateShareableText();
      await navigator.clipboard.writeText(text);
      toast({
        title: "Copied to Clipboard",
        description: "Assessment results have been copied. You can now paste them anywhere.",
      });
      setShareMethod(null);
    } catch (error) {
      toast({
        title: "Copy Failed",
        description: "Could not copy to clipboard. Please try another method.",
        variant: "destructive",
      });
    }
  };

  const handleDownloadPDF = () => {
    generateAssessmentPDF(results, {
      includeCharts: true,
      includeRecommendations: true,
      includeHistory: true,
    });
    toast({
      title: "PDF Generated",
      description: "Your assessment report is being prepared for download.",
    });
    setShareMethod(null);
  };

  const handleEmailProvider = async () => {
    if (!providerEmail || !providerName) {
      toast({
        title: "Missing Information",
        description: "Please provide both provider name and email address.",
        variant: "destructive",
      });
      return;
    }

    setIsSending(true);

    // In a real app, this would send an email via an API
    // For now, we'll open the user's email client with pre-filled content
    const subject = encodeURIComponent(
      `Mental Health Assessment Results - ${assessmentType.toUpperCase()}`
    );
    const body = encodeURIComponent(`Dear ${providerName},

I am sharing my recent mental health assessment results for your review.

${generateShareableText()}

Please let me know if you need any additional information.

Best regards`);

    const mailtoLink = `mailto:${providerEmail}?subject=${subject}&body=${body}`;

    try {
      window.location.href = mailtoLink;
      toast({
        title: "Email Client Opened",
        description: "Your email client has been opened with the assessment results.",
      });
      setIsSending(false);
      setShareMethod(null);
    } catch (error) {
      toast({
        title: "Error",
        description: "Could not open email client. Please try copying the results instead.",
        variant: "destructive",
      });
      setIsSending(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Share2 className="h-5 w-5" />
            Share Assessment Results with Provider
          </DialogTitle>
        </DialogHeader>

        {!shareMethod ? (
          <div className="space-y-6">
            <Card className="bg-blue-50 border-blue-200">
              <CardContent className="pt-4">
                <div className="flex items-start gap-3">
                  <AlertCircle className="h-5 w-5 text-blue-600 flex-shrink-0 mt-0.5" />
                  <div>
                    <h3 className="font-semibold text-blue-900 mb-1">Privacy Notice</h3>
                    <p className="text-sm text-blue-800">
                      Only share your assessment results with trusted healthcare providers. This
                      information is sensitive and should be handled confidentially.
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>

            <div className="space-y-3">
              <h3 className="font-semibold">Choose a sharing method:</h3>

              <Card
                className="cursor-pointer hover:shadow-md transition-shadow"
                onClick={() => setShareMethod("email")}
              >
                <CardContent className="pt-6">
                  <div className="flex items-center gap-4">
                    <div className="p-3 rounded-lg bg-primary/10">
                      <Mail className="h-6 w-6 text-primary" />
                    </div>
                    <div className="flex-1">
                      <h4 className="font-semibold">Email to Provider</h4>
                      <p className="text-sm text-muted-foreground">
                        Send results directly to your healthcare provider's email
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card
                className="cursor-pointer hover:shadow-md transition-shadow"
                onClick={handleDownloadPDF}
              >
                <CardContent className="pt-6">
                  <div className="flex items-center gap-4">
                    <div className="p-3 rounded-lg bg-green-100">
                      <Download className="h-6 w-6 text-green-600" />
                    </div>
                    <div className="flex-1">
                      <h4 className="font-semibold">Download as PDF</h4>
                      <p className="text-sm text-muted-foreground">
                        Save a professional PDF report to share in person or upload
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card
                className="cursor-pointer hover:shadow-md transition-shadow"
                onClick={handleCopyToClipboard}
              >
                <CardContent className="pt-6">
                  <div className="flex items-center gap-4">
                    <div className="p-3 rounded-lg bg-purple-100">
                      <Copy className="h-6 w-6 text-purple-600" />
                    </div>
                    <div className="flex-1">
                      <h4 className="font-semibold">Copy to Clipboard</h4>
                      <p className="text-sm text-muted-foreground">
                        Copy results as text to paste into patient portals or messages
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        ) : shareMethod === "email" ? (
          <div className="space-y-6">
            <div className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="providerName">Provider Name *</Label>
                <Input
                  id="providerName"
                  placeholder="Dr. Smith"
                  value={providerName}
                  onChange={(e) => setProviderName(e.target.value)}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="providerEmail">Provider Email *</Label>
                <Input
                  id="providerEmail"
                  type="email"
                  placeholder="doctor@example.com"
                  value={providerEmail}
                  onChange={(e) => setProviderEmail(e.target.value)}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="notes">Additional Notes (Optional)</Label>
                <Textarea
                  id="notes"
                  placeholder="Any additional context or information you'd like to share with your provider..."
                  value={additionalNotes}
                  onChange={(e) => setAdditionalNotes(e.target.value)}
                  rows={4}
                />
              </div>
            </div>

            <Card className="bg-muted/50">
              <CardContent className="pt-4">
                <div className="flex items-start gap-3">
                  <FileText className="h-5 w-5 text-muted-foreground flex-shrink-0 mt-0.5" />
                  <div>
                    <p className="text-sm font-medium mb-1">What will be shared:</p>
                    <ul className="text-sm text-muted-foreground space-y-1">
                      <li>• Your latest assessment score and severity level</li>
                      <li>• Interpretation of results</li>
                      <li>• Recommendations from the assessment</li>
                      <li>• Recent assessment history (if available)</li>
                      <li>• Any additional notes you provide</li>
                    </ul>
                  </div>
                </div>
              </CardContent>
            </Card>

            <div className="flex gap-3">
              <Button variant="outline" onClick={() => setShareMethod(null)} className="flex-1">
                Back
              </Button>
              <Button
                onClick={handleEmailProvider}
                disabled={isSending || !providerEmail || !providerName}
                className="flex-1"
              >
                {isSending ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    Sending...
                  </>
                ) : (
                  <>
                    <Send className="h-4 w-4 mr-2" />
                    Open Email
                  </>
                )}
              </Button>
            </div>
          </div>
        ) : null}
      </DialogContent>
    </Dialog>
  );
}
